#!/usr/bin/environment node

/**
 * Module dependencies.
 */
require('source-map-support').install();
const cluster = require('cluster');
const http = require('http');
const fs = require('fs');
const path = require('path');

const env = require('../environment');
const logging = require('../app/common/util/logging/logging');

function loggerSetup(nestedDir) {
    const baseLogDir = env.logging.logDir || `${__dirname}/../logs`;
    const logDir = `${baseLogDir}${path.sep}${nestedDir}`;
    if (!env.logging || !env.logging.storeToCloudLogs) {
        if (!fs.existsSync(baseLogDir)) {
            fs.mkdirSync(baseLogDir, {recursive: true});
        }
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, {recursive: true});
        }
    }
    logging.setupInfo(`${baseLogDir}${path.sep}${nestedDir}`, `${nestedDir}-access.log`);
    logging.setupLog(`${baseLogDir}${path.sep}${nestedDir}`, `${nestedDir}-access.log`);
    logging.setupDebug(`${baseLogDir}${path.sep}${nestedDir}`, `${nestedDir}-access.log`);
    logging.setupWarn(`${baseLogDir}${path.sep}${nestedDir}`, `${nestedDir}-access.log`);
    logging.setupError(`${baseLogDir}${path.sep}${nestedDir}`, `${nestedDir}-error.log`);
}


if (cluster.isMaster) {
    loggerSetup('master');
    console.info(`Master ${process.pid} is running`);
    let numCPUs;
    let fileDescriptor;

    numCPUs = env.numProcesses;


    if (process.env.NODE_ENV === "testing") {
        numCPUs = 1;
    }

    for (let i = 0; i < numCPUs; i++) {
        const worker = cluster.fork();
        worker.on('message', (msg) => {
            // if (msg.title === "apiLog") {
            // 	Logging.apiLogging(writeStream, msg.data);
            // }
        })
    }

    cluster.on('exit', (worker, code, signal) => {
        // console.log(`EXIT CODE: ${code}`);
        // console.log(`EXIT SIGNAL: ${signal}`);
        console.log(`worker ${worker.process.pid} died`);
        if (env.autoRestart) {
            cluster.fork();
        }
    });
} else {
    loggerSetup('child');
    let app = require('../app');
    let debug = require('debug')('code-names-web-api:server');

    /**
     * GET port from environment and store in Express.
     */

    let port = normalizePort(process.env.PORT || env.port || '8100');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        let port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.info('Server now running on port ' + addr.port + ` : Worker ${process.pid} is running`);
        debug('Listening on ' + bind);
    }

    module.exports.server = server;
}
